package com.logging.example;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * LoggingApp demonstrates how to use SLF4J (Simple Logging Facade for Java)
 * with Logback as the backend implementation for logging messages in a Java
 * application.
 *
 * <p>
 * This example logs a warning message and an error message generated by
 * simulating an exception. The logger is configured using the default Logback
 * configuration.
 * </p>
 *
 * <p>
 * <strong>Author:</strong> MonigaBalasubramanian<br>
 * <strong>Created on:</strong> 28-June-2025
 * </p>
 */
public class LoggingApp {

	/** Logger instance specific to the LoggingApp class */
	private static final Logger logger = LoggerFactory.getLogger(LoggingApp.class);

	/**
	 * The main method executes the logging logic. It logs a warning, then simulates
	 * an error that is caught and logged as an error message.
	 *
	 * @param args command-line arguments (not used here)
	 */
	public static void main(String[] args) {
		// Log a warning message
		logger.warn("Warning: Disk usage nearing threshold limit.");

		try {
			simulateError(); // simulate a failure
		} catch (Exception e) {
			// Log an error message with exception message
			logger.error("An error occurred while processing: {}", e.getMessage());
		}
	}

	/**
	 * Simulates an application failure by throwing a RuntimeException. This method
	 * is used to demonstrate error logging.
	 */
	private static void simulateError() {
		throw new RuntimeException("Database connection failed");
	}
}
